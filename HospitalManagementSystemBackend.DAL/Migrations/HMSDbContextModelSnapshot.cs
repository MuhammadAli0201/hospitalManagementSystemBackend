// <auto-generated />
using System;
using HospitalManagementSystemBackend.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalManagementSystemBackend.DAL.Migrations
{
    [DbContext(typeof(HMSDbContext))]
    partial class HMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Gender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            GenderName = "Male"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            GenderName = "Female"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            GenderName = "Others."
                        });
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            Id = new Guid("380560f0-8da6-4ab0-bf8f-7f13b7ed1ffc"),
                            Name = "Paracetamol"
                        },
                        new
                        {
                            Id = new Guid("3212a800-cf55-413d-a4f3-58aeb5ef7bb3"),
                            Name = "Ibuprofen"
                        },
                        new
                        {
                            Id = new Guid("f8725d7d-3509-496c-8bda-49082ef1cb50"),
                            Name = "Loratadine"
                        },
                        new
                        {
                            Id = new Guid("7695536c-e3d5-4284-8942-1c6746b7f339"),
                            Name = "Omeprazole"
                        },
                        new
                        {
                            Id = new Guid("213b1942-6277-4664-b508-8eac370c9f02"),
                            Name = "Amoxicillin"
                        },
                        new
                        {
                            Id = new Guid("693fa0fb-f500-48bf-ad87-3beda10b87a6"),
                            Name = "Simvastatin"
                        },
                        new
                        {
                            Id = new Guid("0ff11569-5654-49d6-80c7-41278461fa86"),
                            Name = "Metformin"
                        },
                        new
                        {
                            Id = new Guid("1202644d-a4e3-4c8a-8231-ef7f8d301cfa"),
                            Name = "Warfarin"
                        },
                        new
                        {
                            Id = new Guid("30556c41-88b7-4fac-a465-eb1d6864f6b6"),
                            Name = "Albuterol"
                        },
                        new
                        {
                            Id = new Guid("44d29933-054c-48b2-bea3-074813a21c2b"),
                            Name = "Fluoxetine"
                        },
                        new
                        {
                            Id = new Guid("0eaa11d6-4875-4312-9e12-9d3691c5777f"),
                            Name = "Morphine"
                        },
                        new
                        {
                            Id = new Guid("c9e13b99-1667-48cb-b534-7bcc820f13ea"),
                            Name = "Hydrochlorothiazide"
                        },
                        new
                        {
                            Id = new Guid("a0a3113a-b58b-4c9a-b9bf-eecb55710618"),
                            Name = "Amlodipine"
                        },
                        new
                        {
                            Id = new Guid("782d006b-db4e-41f6-9248-5b8470a564d9"),
                            Name = "Prednisone"
                        },
                        new
                        {
                            Id = new Guid("a116134f-928f-4678-877b-931ba8bedbe1"),
                            Name = "Diazepam"
                        });
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiseaseDiagnosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalBill")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientTokenId");

                    b.ToTable("PatientScript");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientScriptMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientScriptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientScriptId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientScriptId");

                    b.ToTable("PatientScriptMedicine");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientToken");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Doctor", b =>
                {
                    b.HasBaseType("HospitalManagementSystemBackend.Models.Models.Person");

                    b.Property<string>("AreaOfSpecialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4737db8d-c459-45df-9f31-7db7358b9c57"),
                            Address = "123 Main St, City",
                            Age = 35,
                            CNIC = "12345-678901",
                            DateOfBirth = new DateTime(1989, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "John",
                            GenderId = new Guid("11111111-1111-1111-1111-111111111111"),
                            LName = "Doe",
                            MobileNo = "123456781",
                            AreaOfSpecialization = "Cardiology"
                        },
                        new
                        {
                            Id = new Guid("3298cb2d-2bac-41b7-badc-8997a33fc87f"),
                            Address = "456 Elm St, City",
                            Age = 40,
                            CNIC = "12345-678902",
                            DateOfBirth = new DateTime(1984, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Emily",
                            GenderId = new Guid("22222222-2222-2222-2222-222222222222"),
                            LName = "Smith",
                            MobileNo = "123456782",
                            AreaOfSpecialization = "Orthopedics"
                        },
                        new
                        {
                            Id = new Guid("fe6e1c48-f484-4796-b261-81edab9fef3d"),
                            Address = "789 Oak St, City",
                            Age = 45,
                            CNIC = "12345-678903",
                            DateOfBirth = new DateTime(1979, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Michael",
                            GenderId = new Guid("33333333-3333-3333-3333-333333333333"),
                            LName = "Johnson",
                            MobileNo = "123456783",
                            AreaOfSpecialization = "Neurology"
                        },
                        new
                        {
                            Id = new Guid("e75dfae2-1bbf-430a-8b92-6910977b43c6"),
                            Address = "234 Pine St, City",
                            Age = 38,
                            CNIC = "12345-678904",
                            DateOfBirth = new DateTime(1986, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Sarah",
                            GenderId = new Guid("11111111-1111-1111-1111-111111111111"),
                            LName = "Williams",
                            MobileNo = "123456784",
                            AreaOfSpecialization = "Pediatrics"
                        },
                        new
                        {
                            Id = new Guid("1a8fc091-442a-460e-8468-4829705e0874"),
                            Address = "567 Cedar St, City",
                            Age = 42,
                            CNIC = "12345-678905",
                            DateOfBirth = new DateTime(1982, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "David",
                            GenderId = new Guid("22222222-2222-2222-2222-222222222222"),
                            LName = "Brown",
                            MobileNo = "123456785",
                            AreaOfSpecialization = "Dermatology"
                        },
                        new
                        {
                            Id = new Guid("60829261-8a6c-4e19-91c0-1d46472e107d"),
                            Address = "890 Maple St, City",
                            Age = 37,
                            CNIC = "12345-678906",
                            DateOfBirth = new DateTime(1987, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FName = "Jennifer",
                            GenderId = new Guid("33333333-3333-3333-3333-333333333333"),
                            LName = "Lee",
                            MobileNo = "123456786",
                            AreaOfSpecialization = "Oncology"
                        });
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Patient", b =>
                {
                    b.HasBaseType("HospitalManagementSystemBackend.Models.Models.Person");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientScript", b =>
                {
                    b.HasOne("HospitalManagementSystemBackend.Models.Models.PatientToken", "PatientToken")
                        .WithMany("PatientScripts")
                        .HasForeignKey("PatientTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientToken");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientScriptMedicine", b =>
                {
                    b.HasOne("HospitalManagementSystemBackend.Models.Models.Medicine", "Medicine")
                        .WithMany("PatientScriptMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManagementSystemBackend.Models.Models.PatientScript", "PatientScript")
                        .WithMany("PatientScriptMedicines")
                        .HasForeignKey("PatientScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("PatientScript");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientToken", b =>
                {
                    b.HasOne("HospitalManagementSystemBackend.Models.Models.Doctor", "Doctor")
                        .WithMany("PatientTokens")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalManagementSystemBackend.Models.Models.Patient", "Patient")
                        .WithMany("PatientTokens")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Person", b =>
                {
                    b.HasOne("HospitalManagementSystemBackend.Models.Models.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Medicine", b =>
                {
                    b.Navigation("PatientScriptMedicines");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientScript", b =>
                {
                    b.Navigation("PatientScriptMedicines");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.PatientToken", b =>
                {
                    b.Navigation("PatientScripts");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Doctor", b =>
                {
                    b.Navigation("PatientTokens");
                });

            modelBuilder.Entity("HospitalManagementSystemBackend.Models.Models.Patient", b =>
                {
                    b.Navigation("PatientTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
